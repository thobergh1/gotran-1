
parameters("I_Na",
g_Na = 0.36,
lambda_Na = 1)


parameters("INa_L",
g_NaL = 0.03,
thL = 200)


parameters("I_NaK",
KmKo = 1.5,
KmNaip = 11,
Q10KmNai = 1.4,
Q10NaK = 1.6,
g_NaK = 2.3939999999999997)


parameters("I_Ks",
epi = 0,
g_Ks = 0.0127,
pNaK = 0.018)


parameters("I_KATP",
g_KATP = 0.01)


parameters("I_Kr",
g_Kr = 0.029399999999999996,
lambda_K = 1)


parameters("I_to",
g_to = 0.105)


parameters("I_K1",
g_K1 = 0.27)


parameters("I_bCl",
g_bCl = 0.003)


parameters("I_Ca",
Q10CaL = 1.8,
g_CaL = 0.8316000000000001)


parameters("I_NCX",
Kdact = 0.00015,
KmCai = 0.0036,
KmCao = 1.3,
KmNai = 12.3,
KmNao = 87.5,
Q10NCX = 1.6,
g_NaCa = 14.1,
ksat = 0.3,
nu = 0.3)


parameters("I_PCa",
KmPCa = 0.0005,
Q10SLCaP = 2.35,
g_pCa = 0.12)


parameters("I_CaBK",
g_bCa = 0.0021)


parameters("I_f",
E_f = -17,
g_f = 0.01)


parameters("Na Concentrations",
# Na_i = 8,
Na_sl = 8,
Nao = 140)


parameters("K Concentration",
K_i = 120.0,
Ko = 5)


parameters("Ca Concentrations",
ce = 0.42)


parameters("RyRs",
K_RyR = 0.015,
alpha_RyR = 0.02075,
beta_RyR = 0.042,
eta_RyR = 0.00001,
gamma_RyR = 0.001,
lambda_RyR = 0.63)


parameters("Intracellular volumes",
Vc = 0.917,
Vd = 0.001,
Vn = 0.05,
Vs = 0.004,
Vsl = 0.028)


parameters("SERCA pump",
J_SERCA_bar = 0.00016,
K_c = 0.00025,
K_n = 1.7)


parameters("Ca Buffers",
B_tot_c = 0.063,
B_tot_d = 2.7,
B_tot_s = 60,
B_tot_sl = 1.45,
k_off_c = 0.03,
k_off_d = 1,
k_off_s = 65.0,
k_off_sl = 0.15,
k_on_c = 40,
k_on_d = 100,
k_on_s = 100.0,
k_on_sl = 100,
lambda_B = 1,
lambda_B_c = 1)


parameters("Ca Fluxes",
alpha_d_c = 0.0027,
alpha_n_s = 0.0093,
alpha_sl_c = 0.3,
lambda_c_d = 1,
lambda_c_i = 1,
lambda_diff = 1)


parameters("Cl Concentrations",
Cli = 15,
Clo = 150)


parameters("Membrane potential",
Cm = 0.01,
Frdy = 96.485,
R = 8.314,
Temp = 310,
chi = 0.9,
lambda_c_e = 1,
stim_amplitude = 5.0,
stim_duration = 20.0,
stim_period = 10000.0,
stim_start = 0.0)

states("I_Na",
m = 0.0047593841564,
j = 0.59186803670583)


states("I_NaL",
mL = 0.00056156997976,
hL = 0.19825212801003)


states("I_Kr",
Xr1 = 0.02598687936732,
Xr2 = 0.46218104728376)


states("I_Ks",
x_Ks = 0.00418046147173)


states("i_to",
q = 0.89186079496414,
r = 0.00415791788969)


states("I_Ca",
d = 3.47393157e-06,
f = 0.99328007454758,
f_Ca_B = 0.05601726193501)


states("I_f",
xf = 0.08014973245989)


states("RyRs",
r_RyR = 0.99999973974165)


states("Ca Concentrations",
cn = 0.69858720814252,
cc = 0.00011382799663,
cd = 0.00020977171788,
csl = 0.00011798425266,
cs = 0.69792301896013)


states("Ca Buffer Concentrations",
bc = 0.00839395214247,
bd = 0.05570692056887,
bs = 31.06660220440676,
bsl = 0.10584192890313)


states("Membrane potential",
V_m = -80.42101165870085)


states("Sodium concentration",
Na_i = 8.07942377455463)

expressions("Reversal potentials")
FoRT = Frdy/(R*Temp)
ena = log(Nao/Na_i)/FoRT
ek = log(Ko/K_i)/FoRT
eca_sl = log(ce/csl)/(2*FoRT)
ecl = log(Cli/Clo)/FoRT
Qpow = -31 + Temp/10


expressions("I_Na")
mss = (1 + exp(-19/3 - V_m/9))**(-2)
taum = 0.06*exp(-(-5/51 + V_m/51)**2) + 0.13*exp(-(23/8 + V_m/16)**2)
# Kristian: I've adjusted the conditions for for aj and bj slightly to make the expressions continuous
aj = Conditional(Ge(V_m, -38), 0, (-2.5e4*exp(0.2*V_m) - 7.0e-6*exp(-0.04*V_m))*(V_m + 38)/(1 + exp(0.3*(V_m + 79))))
bj = Conditional(Ge(V_m, -38.218), 0.6*exp(0.09*V_m)/(1 + exp(-1*(V_m + 40))), 0.02*exp(-0.01*V_m)/(1 + exp(-0.14*(V_m + 40))))
tauj = 1.0/(aj + bj)
jss = (1 + exp(72/7 + V_m/7))**(-2)
I_Na = g_Na*lambda_Na*m**3*(-ena + V_m)*j
dm_dt = (-m + mss)/taum
dj_dt = (-j + jss)/tauj


expressions("I_NaL")
mLss = 1.0/(1 + exp(-43/5 - V_m/5))
tm = 1.0/(8.6*exp(-77/6 - V_m/6) + 6.8*exp(12/35 + V_m/35))
tmL = tm
hLss = 1.0/(1 + 124658.506952*exp(V_m*4/30))
GNaL = Conditional(Eq(epi, 1), g_NaL, g_NaL*0.6)
I_NaL = lambda_Na*(-ena + V_m)*GNaL*hL*mL
dmL_dt = (-mL + mLss)/tmL
dhL_dt = (-hL + hLss)/thL


expressions("I_NaK")
sigma = -1/7 + exp(Nao/67)/7
fNaK = 1.0/(1 + 0.12*exp(-0.1*FoRT*V_m) + 0.037*exp(-FoRT*V_m)*sigma)
I_NaK = Ko*g_NaK*fNaK/((1 + KmNaip**4/Na_i**4)*(KmKo + Ko))


expressions("I_Kr")
Xr1_inf = 1.0/(1.0 + exp(-(V_m+20.7)/4.9))
alpha_Xr1 = 450.0/(1.0 + 0.0111089965382*exp(-0.1*V_m))
beta_Xr1 = 6.0/(1.0 + 13.5813245226*exp(0.0869565217391*V_m))
tau_Xr1 = 1.0*alpha_Xr1*beta_Xr1
Xr2_infinity = 1.0/(1.0 + exp((V_m+88)/50))
alpha_Xr2 = 3.0/(1.0 + exp(-(V_m+60)/20))
beta_Xr2 = 1.12/(1.0 + exp((V_m-60)/20))
tau_Xr2 = 1.0*alpha_Xr2*beta_Xr2
I_Kr = 0.430331482912*g_Kr*sqrt(Ko)*(-ek + V_m)*Xr1*Xr2
dXr1_dt = (-Xr1 + Xr1_inf)/tau_Xr1
dXr2_dt = (-Xr2 + Xr2_infinity)/tau_Xr2


expressions("I_Ks")
eks = log((Ko + Nao*pNaK)/(K_i + Na_i*pNaK))/FoRT
xsss = 1.0/(1 + 0.76228973079*exp(-V_m/14))
tauxs = 990/(1 + 0.842460441617*exp(-V_m/14))
I_Ks = g_Ks*x_Ks**2*(-eks + V_m)
dx_Ks_dt = (-x_Ks + xsss)/tauxs


expressions("i_to")
q_inf = 1.0/(1.0 + 58.9637634804*exp(0.0769230769231*V_m))
tau_q = 6 + 39/(0.0168716780457*exp(-0.08*V_m) + 6.46648051673*exp(0.1*V_m))
r_inf = 1.0/(1.0 + 3.28489055021*exp(-0.0533333333333*V_m))
tau_r = 2.75 + 14.4/(0.0207698622486*exp(-0.12*V_m) +15.7194688773*exp(0.09*V_m))
I_to = g_to*(-ek + V_m)*q*r
dq_dt = (-q + q_inf)/tau_q
dr_dt = (-r + r_inf)/tau_r


expressions("I_K1")
aK1 = 1.0/(1 + 7.50455791508e-06*exp(0.2*V_m - 0.2*ek))
bK1 = (0.745912348821*exp(0.08*V_m - 0.08*ek) +3.32464030033e-16*exp(0.06*V_m - 0.06*ek))/(1 +0.0820849986239*exp(0.5*ek - 0.5*V_m))
K1ss = aK1/(aK1 + bK1)
I_K1 = 0.430331482912*g_K1*lambda_K*sqrt(Ko)*(-ek + V_m)*K1ss


expressions("I_bCl")
I_bCl = g_bCl*(-ecl + V_m)


expressions("I_Ca")
fss = 1.0/(1 + exp(35/9 + V_m/9)) + 0.6/(1 + exp(5/2 - V_m/20))
dss = 1.0/(1 + exp(-(5+V_m)/6))

#taud = (1 - exp(-5/6 - V_m/6))*dss/(0.175 + 0.035*V_m)
# we use L'Hopital's rule to replace f(V)/g(V) with f'(V)/g'(V) in the limit V -> -5, where f(V)/g(V) tends to 0/0
# f'(V)/g'(V) = 4.13903055721027*exp(V_m/6)/(exp(V_m/6) + 0.434598208507078)**2
# f'(-5)/g'(-5) = 2.3809523809523805
taud = Conditional(Lt(abs(V_m + 5), 2.e-2), 2.3809523809523805, (1 - exp(-5/6 - V_m/6))*dss/(0.175 + 0.035*V_m))

tauf = 1.0/(0.02 + 0.02*exp(-(0.493 + 0.034*V_m)**2))
ibarca_j = 4*Frdy*g_CaL*(-0.34*ce + 0.34*cd*exp(2*FoRT*V_m))*FoRT*V_m/(-1 +exp(2*FoRT*V_m))
I_CaL = lambda_c_d*Q10CaL**Qpow*(1 - f_Ca_B)*d*f*ibarca_j
dd_dt = (-d + dss)/taud
df_dt = (-f + fss)/tauf
df_Ca_B_dt = -0.012*f_Ca_B + 1.7*(1 - f_Ca_B)*cd


expressions("I_NCX")
Ka_sl = 1.0/(1 + Kdact**2/csl**2)
s1_sl = ce*Na_i**3*exp(nu*FoRT*V_m)
s2_sl = Nao**3*csl*exp((-1 + nu)*FoRT*V_m)
s3_sl = KmCao*Na_i**3 + ce*Na_i**3 + Nao**3*csl + KmCai*Nao**3*(1 +Na_i**3/KmNai**3) + KmNao**3*(1 + csl/KmCai)*csl
I_NaCa = g_NaCa*lambda_c_e*Q10NCX**Qpow*(-s2_sl + s1_sl)*Ka_sl/((1 +ksat*exp((-1 + nu)*FoRT*V_m))*s3_sl)


expressions("I_PCa")
I_pCa = g_pCa*lambda_c_e*Q10SLCaP**Qpow*csl**2/(KmPCa**2 + csl**2)


expressions("I_CaBK")
I_bCa = g_bCa*lambda_c_e*(-eca_sl + V_m)


expressions("I_f")
xf_inf = 1.0/(1 + exp(78/5 + V_m/5))
tau_xf = 1900/(1 + exp(3/2 + V_m/10))
I_f = g_f*(-E_f + V_m)*xf
dxf_dt = (-xf + xf_inf)/tau_xf


expressions("I_KATP")
I_KATP = g_KATP*(Ko/5.4)**(0.3)*(1/(40+3.5*0.025*V_m))*(V_m-ek)


expressions("Ca Fluxes")
J_CaL = -Cm*chi*I_CaL/(2*Frdy)
J_pCa = -Cm*chi*I_pCa/(2*Frdy)
J_bCa = -Cm*chi*I_bCa/(2*Frdy)
J_NaCa = Cm*chi*I_NaCa/Frdy
J_e_sl = J_NaCa + J_bCa + J_pCa
Q10SERCA = 2.6
J_SERCA = J_SERCA_bar*Q10SERCA**Qpow*lambda_c_i*(cc**2/K_c**2 - cn**2/K_n**2)/(1 + cc**2/K_c**2 +cn**2/K_n**2)
J_n_s = alpha_n_s*lambda_c_i*lambda_diff*(-cs + cn)
J_sl_c = alpha_sl_c*lambda_c_i*lambda_diff*(-cc + csl)
J_d_c = alpha_d_c*lambda_c_d*lambda_diff*(-cc + cd)


expressions("RyRs")
p = 1.0/(1 + K_RyR**3/cd**3)
J_RyR_active = alpha_RyR*lambda_RyR*lambda_c_i*(-csl + cs)*p*r_RyR
J_leak = alpha_RyR*gamma_RyR*lambda_RyR*lambda_c_i*(-csl + cs)
J_RyR = J_RyR_active + J_leak
dr_RyR_dt = eta_RyR*(1 - r_RyR)/p -J_RyR_active/(beta_RyR*lambda_RyR*lambda_c_i)


expressions("Ca Buffers")
J_c_b = Vc*(-k_off_c*bc + k_on_c*(-bc + B_tot_c*lambda_B*lambda_B_c)*cc)
J_d_b = Vd*(-k_off_d*bd + k_on_d*(-bd + B_tot_d*lambda_B*lambda_B_c)*cd)
J_s_b = Vs*(-k_off_s*bs + k_on_s*(-bs + B_tot_s*lambda_B)*cs)
J_sl_b = Vsl*(-k_off_sl*bsl + k_on_sl*(-bsl +B_tot_sl*lambda_B*lambda_B_c)*csl)


expressions("Ca Concentrations")
dcn_dt = 1.0*(-J_n_s + J_SERCA)/Vn
dcc_dt = 1.0*(-J_SERCA - J_c_b + J_d_c + J_sl_c)/Vc
dcd_dt = 1.0*(-J_d_b - J_d_c + J_CaL)/Vd
dcsl_dt = 1.0*(-J_sl_b - J_sl_c + J_RyR + J_e_sl)/Vsl
dcs_dt = 1.0*(-J_RyR - J_s_b + J_n_s)/Vs


expressions("Ca Buffer Concentrations")
dbc_dt = 1.0*J_c_b/Vc
dbd_dt = 1.0*J_d_b/Vd
dbs_dt = 1.0*J_s_b/Vs
dbsl_dt = 1.0*J_sl_b/Vsl


expressions("Membrane potential")
i_Stim = Conditional(And(Ge(time - floor(time/stim_period)*stim_period, stim_start), Le(time - floor(time/stim_period)*stim_period, stim_start + stim_duration), ), -stim_amplitude, 0)*Conditional(V_m < -40, 1, 0)
I_tot = I_CaL + I_K1 + I_Kr + I_Ks + I_Na + I_NaCa + I_NaK + I_NaL + I_bCa+ I_bCl + I_f + I_pCa + I_to + I_KATP
dV_m_dt = -I_tot - i_Stim


expressions("Sodium concentration")
I_Na_tot = 3*I_NaK + 3*I_NaCa + I_Na + I_NaL + 0.3293*I_f
J_Na = -Cm*chi*I_Na_tot/Frdy
dNa_i_dt = J_Na
